# 2 Ders (Projenin Oluşturulması)

* 6.0 'da Startup yok o yüzden geçişler kolay oluyor.
* Tek tek paket yüklemek yerine Solution'da sağ tıklayıp nugette paket yüklüyoruz.
* Microsoft.EntityFrameworkCore 6.0.16  (6.0'ın son sürümünü indirdik)
* Microsoft.EntityFrameworkCore.Design 6.0.16  (6.0'ın son sürümünü indirdik)
* Microsoft.EntityFrameworkCore.SQLServer 6.0.16  (6.0'ın son sürümünü indirdik)
* Microsoft.EntityFrameworkCore.Tools 6.0.16  (6.0'ın son sürümünü indirdik)
* Microsoft.AspNetCore.Identity 2.2.0
* Microsoft.AspNetCore.Identity.EntityFrameworkCore 6.0.16 

# 3 Ders (Referans İşlemleri ve Entitylerin Yazılması)

Katmanların birbirleriyle referans işlemleri.
EntityLayer: ...
DataAccessLayer: EL
BusinessLayer: DAL + EL
PresentationLayer: EL + DAL+ BL
//DTO'yu sonra dahil edicez.

Concrete: Sınıflar için kullanılır. 
Abstract: Interfacce için.

Access Modifiers: Erişim belirleyicileri
-Public:her klasör sınıf vs 'den ulaşılabilir.
-Private: sadece kullanıldığı namespace içinde erişim sağlanabiliyor. 
-Protected: bağlı bulunduğu sınıftan ve o sınıfı kalıtsal olarak alan sınıflardan erişilebiliyor.
-Internal: sadece bulunduğu katmanda erişim sağlanabilir.

# 4 Ders (Identity Kütüphanesinin Eklenmesi)

Migration eklerken Up veritabanında oluşacakları gösterirken, down iptal edersek nelerin silineceğini gösterir.

Asp.Net Users:
Id'nin türü Nvarchar
EmailConfirmed türü byte (email adresi onaylandı mı onaylanmadı mı kontrolü)
-Register > Maile 6 haneli kod Gönder > Kullanıcı kodu girsin > EmailConfirmed true olsun
-Login > Kullanıcı adı, şifre, email conf==true
-Stampler başka bir sosyal medya racılığıyla giriş yaparken
-TwoFactorEnabled (iki adımda doğrulama)
-LockoutEnd hesabın kilitli kalmasının bitme süresi (default 5 dakika)
-LockOutEnabled true olursa hatalı girişi sayar
-AccessFailedCount kaç kere yanlış bilgi girildi

AspNetRoles:
Id
Name Admin, Member .. 
NormalizedName büyük harflerle yazıldığı hali
ConcurrencyStamp

# 5 Ders (AspNet User Tablosunun Özelleştirilmesi)
Bu derste ilk olarak AppUser adlı sınıfı oluşturduk. Identity paketi ile gelen AppUser'ı kişiselleştirebilmek için. Ardından migration yaptık.

# 6 Ders (Dto katmanı ve AppUserRegisterDto Sınıfı)
Bu derste ilk olarak appuser tablosu ile customeraccount tablosunu ilişkilendirdik. Ardından Dto katmanına oluşturduğumuz entitylerin dosyaları ekleyip AppUserRegisterDto sınıfını oluştrduk ve içini doldurduk.

# 7 Ders (AppUserRegister Fluent Validation)
Bu ders ilk olarak business katmanına 
FluentValidation (11.5.2)
FluentValidation.AspNetCore (11.3.0)
FluentValidation.DependencyInjectionExtensions (11.5.2)
paketlerini yükledik.

ValidationRules adlı klasörü oluşturduktan sonra tüm entitiyler için ValidationRule klasörlerini açtık ve AppUserRegisterValidator için Validator yazdık.

RuleFor Attribute'leri 
--------------------------
NotEmpty: Bir özelliğin boş olmadığını kontrol eder.
Length: Bir özelliğin uzunluğunu kontrol eder. Minimum ve maksimum uzunluklar belirtilebilir.
MinimumLength: Bir özelliğin minimum uzunluğunu kontrol eder.
MaximumLength: Bir özelliğin maksimum uzunluğunu kontrol eder.
EmailAddress: Bir özelliğin geçerli bir email adresi olduğunu kontrol eder.
EqualTo: Bir özelliğin başka bir özellikle aynı değere sahip olup olmadığını kontrol eder.
GreaterThan: Bir özelliğin belirtilen değerden büyük olup olmadığını kontrol eder.
GreaterThanOrEqual: Bir özelliğin belirtilen değerden büyük veya eşit olup olmadığını kontrol eder.
LessThan: Bir özelliğin belirtilen değerden küçük olup olmadığını kontrol eder.
LessThanOrEqual: Bir özelliğin belirtilen değerden küçük veya eşit olup olmadığını kontrol eder.
Matches: Bir özelliğin belirtilen düzenli ifade ile eşleşip eşleşmediğini kontrol eder.
Must: Bir özelliğin özel bir koşulu sağlamasını gerektiren özel bir doğrulama kuralı tanımlar.